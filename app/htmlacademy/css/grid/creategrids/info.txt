Попробуем поймать поток документа и разобраться что это такое. Взглянем на тонкости свойства float и блочно-строчных элементов.
Отработаем основные приёмы построения сеток.
-----------------------------------------------
Пробуем управлять потоком

О понятии потока документа рассказывается в курсе про позиционирование.

Поток — это порядок отображения элементов на странице. По умолчанию блочные элементы отображаются как прямоугольные области,
идущие друг за другом сверху вниз, а строчные элементы располагаются сверху вниз и слева направо и при необходимости переносятся на
новую строку.
Потоком можно управлять и изменять привычное поведение элементов в потоке. Например, можно заставить блочные элементы двигаться не
 сверху вниз, а выстраиваться в несколько колонок.
А научившись управлять потоком, вы сможете строить сетки.
В первой серии заданий мы продемонстрируем как один и тот же HTML-код можно выстроить в разные потоки. Например, вот так:

flowcontrol
----------------
Управление потоком, шаг 2

На первом шаге мы с помощью свойства float изменили поведение первого блока.

Обратите внимание, как он стал наезжать на последующие блоки. Это одна из особенностей флоатов, которую мы разберём позже в курсе.

А пока продолжим: сейчас будем изменять поведение второго блока.

flowcontrol
-------------------
Управление потоком, шаг 3

Со вторым блоком разобрались. Теперь уже первые два блока наезжают на третий.

Чтобы получить нужный нам поток, осталось задать размеры третьему блоку, отцентровать его и избавиться от эффекта «наезжания».

Поможет нам в этом свойство clear.

flowcontrol
-----------------------------
Создадим другой поток
У вас получилось создать первый поток. Теперь попробуем те же самые элементы выстроить по-другому. Вот так:

flowcontrolse
------------------------------
Другой поток, шаг 2

А пока вы пошагово создаёте второй поток, поговорим о сетках.

Сетка — это взаимное расположение крупных блоков сайта. Вспомните любой сайт, например, ВКонтакте или HTML Academy.

У ВКонтакте простая сетка, которая состоит из верхней части, или «хедера», под которой располагаются две колонки, а в самом
низу расположен «футер» или нижняя часть сайта. Вот так схематично можно представить сетку ВКонтакте:

-------------------------------------
 хедер
-------------------------------------
 левая колонка | правая колонка
 меню          | основное содержание
-------------------------------------
 футер
-------------------------------------
У HTML Academy на разных страницах используются разные сетки. Например, на главной странице есть двухколончатый
хедер, под ним содержание страницы в три колонки, затем нижнее меню и двухколончатый футер.

Как вы понимаете, сетки могут быть самыми разными.
flowcontrolse
------------------------------------
Другой поток, шаг 3

Что нужно знать и уметь, чтобы строить сетки? Две вещи:

управлять размерами элементов;
управлять поведением элементов в потоке.
Первая часть детально разбирается в курсе «Блочная модель документа». Там вы учитесь:

задавать размеры;
рамки;
внешние и внутренние отступы;
рассчитывать полный размер элемента;
рассчитывать занимаемую им площадь.
Управлять поведением в потоке мы будем учиться в этом курсе.

Существует несколько способов управлять потоком и строить сетки:

флоаты;
инлайн-блоки;
табличная вёрстка;
флексбоксы.
Табличная вёрстка — самый простой для понимания способ построения сеток.
Но он считается устаревшим и использовать его не рекомендуется. В будущем можно будет использовать для такой вёрстки не таблицы,
 а элементы с display: table, display: table-row и display: table-cell.
Флексбоксы — это новая и очень мощная технология для построения сеток. К сожалению, её поддержка браузерами ещё достаточно слабая.
А флоаты и инлайн-блоки мы разберём в этом курсе более подробно. Основной упор сделаем на флоаты, т. к.
 сейчас это самый распространённый способ построения сеток.
А пока что завершите создание своей второй сетки.

flowcontrolse
-----------------------------------
Погружение в флоаты

А теперь детально разберём свойство float, его значения, особенности поведения и способы применения.

Т. к. у этого свойства нет устоявшегося русского перевода или термина, то мы будем называть его «флоатом», а также
использовать конструкции наподобие «зафлоатить».
Изначально float было предназначено для того, чтобы включать обтекание элементов текстом. Наподобие того, как в более
старой версии HTML текст обтекал изображения c атрибутами align="left" или align="right".

То есть, можно сказать, что float — это свойство, включающее режим обтекания. Но, как часто бывает, судьба уготовила
ему совсем другую роль.

Свойство float имеет следующие значения:

left — прижимает элемент к левому краю родителя, другие элементы обтекают его справа;
right — прижимает элемент к правому краю родителя, другие элементы обтекают его слева;
none — отключает режим обтекания и возвращает элементу нормальное поведение.
Обратите внимание, что зафлоатить элемент по центру нельзя.

Иллюстрация в задании взята из статьи «Раскладка в CSS: float».

deepfloat
-----------------------------------
float и ширина

Вы уже знаете, что по умолчанию блочные элементы растягиваются на всю доступную ширину родителя.
Если мы задаём элементу свойство float:left или float:right, то он прижимается к левому или правому краю,
а также начинает ужиматься по ширине под своё содержимое. С той стороны, которая не прижата к краю родителя, появляется свободное место.
Это место может быть занято другими элементами.
Зафлоаченному элементу можно явно задавать размеры и отступы.
Есть тонкость, связанная со строчными элементами. Если зафлоатить строчный элемент, то он начинает вести себя
как блочный, а именно: воспринимать размеры и отступы.

floatwidth
--------------------------------------
float и выпадание из потока

Про выпадание элементов из потока при абсолютном и фиксированном позиционировании мы поговорим в курсе «Позиционирование».
 А сейчас рассмотрим выпадание при флоатах.

Зафлоаченные элементы выпадают из потока, но лишь частично:

Блочные элементы, которые идут в коде после зафлоаченного блока, перестают его замечать. Они подтягиваются вверх и занимают
 его место, как будто его и нет.
Строчные же элементы, расположенные в коде после зафлоаченного блока, начинают обтекать его со свободной стороны.
Ещё раз: для блочных элементов флоатные не существуют, но текст внутри блоков флоатные обтекает.

Такое поведение флоатов даёт интересные эффекты:

Эффект прохождения сквозь блоки. Проявляется, когда зафлоаченный элемент выше, чем несколько последующих за ним блоков.
Эффект выпадания из родителя или схлопывания родителя. Проявляется тогда, когда все дочерние блоки в родителе зафлоачены.
В этом случае родитель схлопывается по высоте, как будто в нём нет содержимого, а блоки выпадают из него.


floatleavestream
---------------------------------------
Флоат рядом с флоатом

Флоатные элементы становятся невидимыми для блочных элементов и видимыми для текста. А как же они взаимодействуют друг с другом?
Если вкратце то: флоатные элементы видят друг друга.
Идущие друг за другом флоаты выстраиваются в ряд, пока им хватает свободного места. Если места не хватает,
то они начинают переноситься на следующую строчку. Почти как текст.
Как раз эта особенность флоатов и позволила применять их для создания сеток. Ведь в начале двухтысячных в CSS не
было никакого другого способа создавать колонки и задавать им размеры.
Блочные элементы всегда располагались в разных строках. А строчные элементы, хоть и могли располагаться на одной строке,
 совершенно не воспринимали размеры. Позиционирование тоже не подходило для сеток, т. к. элементы выпадали из потока.
В общем, флоаты оказались как нельзя кстати для тех, кто решил уходить с табличной вёрстки.

floatandfloat
---------------------------------------
Когда флоатов много, а места мало

Следует отметить, что поведение нескольких флоатов, когда им не хватает места в одной строке, является очень странным.
Когда не влезающий флоат переносится на новую строку, возможно несколько вариантов и не все из них логичны. Например,
 флоат может «зацепиться» за один из предшествующих флоатов и встать ниже не в самом начале строки, а за предшествующим.
В этом упражнении примеры специально подобраны так, чтобы вы увидели странности поведения флоатов при недостатке места.
Естественно, эти особенности повлияли на приёмы использования флоатов в создании раскладок (еще одно название для сеток).
 Но об этом позже.

floatnospace
---------------------------------------
