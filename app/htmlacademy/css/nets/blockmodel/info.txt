Блочные элементы
Элементы HTML страницы обычно делятся на блочные и строчные.

Блочные элементы можно представлять как прямоугольные области на странице. Они имеют следующие особенности:

До и после блочного элемента существует перенос строки.
Блочным элементам можно задавать ширину, высоту, внутренние и внешние отступы.
Занимают всё доступное пространство по горизонтали.
К блочным элементам относятся такие теги как: <p>, <h1>, <h2>, <ul> и так далее.

Еще один важный блочный тег — это тег <div>, который обозначает просто «блок» или «прямоугольный контейнер».
 Этот тег чаще всего используется для создания сеток.

Существуют и более сложные типы элементов, им будет посвящена вторая часть курса.


blockintro
--------------------------------
Строчные элементы


Строчные элементы располагаются друг за другом в одной строке, при необходимости строка переносится. Особенности строчных элементов:

До и после строчного элемента отсутствуют переносы строки.
Ширина и высота строчного элемента зависит только от его содержания, задать размеры с помощью CSS нельзя.
Можно задавать только горизонтальные отступы.
К строчным элементам относятся такие теги как: <a>, <strong>, <em>, <span> и так далее.

Строчные элементы предназначены для оформления текста на уровне небольших фраз и отдельных слов. Блочные же элементы
предназначены для разметки крупных блоков текста (заголовки, абзацы, списки) и создания сетки.

inlineelements
---------------------------------
Ширина и высота

Ширина и высота элементов задаются с помощью свойств width и height соответственно.
По умолчанию блочные элементы занимают всю доступную ширину, которая равна ширине родительского контейнера или окна браузера.
Высота по умолчанию блочных элементов зависит от их содержимого. Если задать блочному элементу ширину и высоту так,
 что содержимое элемента не будет в него помещаться, то оно как бы «выпадет» из него.
Строчные элементы не реагируют на задание ширины и высоты в CSS.

Задать ширину блоку можно, например, так:

.selector {
    width: 100px;
    height: 100px;
}
Вернуть значения по умолчанию можно с помощью специального значения auto:

.selector {
    width: auto;
    height: auto;
}


withheight
----------------------------------
Внутренние отступы, свойство padding

Свойство padding задает внутренние отступы элемента — отступы от внешней границы элемента до его содержания.
Эти отступы еще иногда называют полями.

Существует несколько способов записи свойства padding.

padding: 10px;
padding: 5px 10px;
padding: 5px 10px 15px;
padding: 5px 10px 15px 20px;
Одинаковые отступы со всех сторон.

Отступы сверху и снизу 5px, справа и слева 10px.

Отступ сверху 5px, слева и справа 10px, снизу 15px.

Разные отступы со всех сторон, в порядке верхний, правый, нижний, левый.

Также можно задавать отступы для разных сторон с помощью свойств padding-left, padding-right, padding-top, padding-bottom.

Для строчных элементов лучше не задавать вертикальных отступов, т.к. они ведут себя непредсказуемо.

В задании внутренние отступы блоков сделаны прозрачными.

padding
----------------------------------
Внешние отступы, свойство margin

Свойство margin задает внешние отступы элемента — отступы от внешней границы элемента до
границ родительского элемента или до соседних элементов.

Способы записи свойства margin аналогичны свойству padding.

margin: 10px;
margin: 5px 10px;
margin: 5px 10px 15px;
margin: 5px 10px 15px 20px;
Одинаковые отступы со всех сторон.

Сверху и снизу 5px, справа и слева 10px.

Сверху 5px, слева и справа 10px, снизу 15px.

Верхний, правый, нижний, левый отступы соответственно.

Можно задавать отступы для разных сторон с помощью свойств margin-left, margin-right, margin-top, margin-bottom.

Строчные элементы реагируют только на горизонтальные отступы.

margin
-------------------------------------
Рамки

Рамка задаётся с помощью свойства border, которое состоит из трёх компонентов:

ширина рамки;
стиль рамки;
цвет.
Например:

selector{
    border: 5px solid red;
}
Это правило задаёт красную сплошную рамку толщиной 5px.
Задавать рамку можно одним свойством border, а можно и с помощью отдельных свойств border-width, border-style, border-color. Например:

selector{
    border-width: 5px;
    border-style: solid;
    border-color: red;
}
Это правило задаёт такую же рамку, как и в примере выше.
Несколько самых распространенных стилей рамок:

solid — сплошная;
dashed — пунктирная;
dotted — точками.
Рамку можно задавать и строчным, и блочным элементам.

frame
-------------------------------------
Стандартная блочная модель

Стандартная блочная модель отвечает на основной вопрос:
Сколько же в итоге места будет занимать элемент?
Ответ следующий:

Область, занимаемая блочным элементом, складывается из его ширины и высоты содержания, внутренних и внешних отступов, ширины рамок .
Для строчных элементов есть свои особенности, которые мы опишем позже.

Схема блочной модели:
Блочная модель

ширина/высота содержания — свойства width и height (синий прямоугольник на схеме);
внутренние отступы — свойство padding;
рамки — свойство border;
внешние отступы — свойство margin.

standardblockmodel
-------------------------------------
+Первое испытание+

Используйте изученные свойства блочной модели для прохождения испытания, а именно:
ширину и высоту;
отступы;
рамки.
Ничего кроме размеров блоков, отступов и рамок менять не надо.

Подобрать правильные размеры вам поможет сетка на фоне.
Размеры маленькой ячейки 20 на 20 пикселей, большой ячейки 100 на 100 пикселей.

Внутренние отступы, в отличие от заданий, здесь непрозрачные.


firstchallange
--------------------------------------
«Схлопывание» внешних отступов

Во второй части курса разберем некоторые важные тонкости блочной модели. И начнем с внешних отступов (или маргинов).
Вертикальный отступ между двумя соседними элементами равен максимальному отступу между ними.
Если отступ одного элемента равен 20px, а второго 40px, то отступ между ними будет 40px.
Этот эффект называется эффектом «схлопывания» внешних отступов или «схлопывания» маргинов.
Горизонтальные отступы между элементами просто складываются. Например, горизонтальный отступ между двумя элементами с
 отступами 30px будет равен 60px.


collapsemargin
-----------------------------------------
«Выпадание» внешних отступов

«Выпадание» — это еще один эффект, связанный с вертикальными внешними отступами. Если внутри родительского
 блока расположить блок и задать ему отступ сверху, то внутренний блок прижмется к верхнему краю родительского, а у
 родительского элемента появится отступ сверху. Т.е. верхний отступ внутреннего элемента «выпадает» из родительского элемента.
Если у родительского элемента тоже был задан внешний отступ, то выберется максимальный отступ между собственным и «выпавшим» .
Чтобы избавиться от эффекта выпадания, можно задать родительскому элементу внутренний отступ (паддинг) сверху или добавить рамку сверху.
Внешние и внутренние отступы всегда складываются.

failingpadding
------------------------------------------
Как отцентровать элемент? [11/23]

Чтобы отцентровать блочный элемент, нужно выполнить следующие действия:

Задать элементу ширину, которая меньше ширины родительского контейнера.
Задать для внешних отступов справа и слева значение auto.
Примеры кода:

selector {
    width: 100px;
    margin: 0 auto;
}

selector {
    width: 100px;
    margin-left: auto;
    margin-right: auto;
}

elementcenter
------------------------------------------
Блочная модель и строчные элементы [12/23]

Еще раз акцентируем внимание на особенности поведения строчных элементов в блочной модели:

Не реагируют на CSS-свойства width и height.
Частично реагируют на margin, воспринимая только горизонтальные отступы.
Частично реагируют на padding, воспринимая только горизонтальные отступы.
При задании вертикальных padding визуально увеличиваются, но без увеличения занимаемого места (не отталкивают другие элементы).
Воспринимают рамки. Аналогично padding рамки сверху и снизу не увеличивают занимаемое элементом место.
После выполнения задания обратите внимание на то, что расстояние между строк в абзацах не увеличилось, хотя элементы визуально стали выше.


blockinlineelements
------------------------------------------
Ширина 100% и ширина по умолчанию [13/23]

CSS-свойство width задаёт не общую ширину блока, а только ширину содержания. Общая ширина блока затем складывается из трёх
 компонентов: ширины содержания, внутренних отступов и ширины рамок слева и справа.
Поведение элемента может зависеть от того, как именно вы зададите его ширину.
Первый вариант. Вариант по умолчанию, когда ширина не задается, соответствует значению width:auto;. В этом случае блок
занимает всю ширину родительского блока. Если у блока есть внутренние отступы или рамки, то его ширина содержания
автоматически уменьшается, а общая ширина остается равной ширине родителя.
Второй вариант. Когда ширина блока задана явно, например, width:100%;. В этом случае ширина содержания блока равна ширине
родительского блока. Если блоку добавить внутренние отступы и рамки, то его общая ширина становится больше ширины родителя.
В этом задании вы увидите, как эти эффекты работают на практике. Обратите внимание, что ширины блоков будут расчитываться автоматически.

defaultwidth
-------------------------------------------
Проблемы обычной блочной модели

В чём проблема описанного механизма расчета ширины?. Ведь можно просто не задавать ширину, используя auto, либо просто подбирать
размеры блоков и отступов как на макете.
Проблемы начинаются, когда сетка резиновая и элементы в ней должны тянуться. Самый простой пример: форма, в которой поля
должны занимать всю ширину контейнера, но при этом иметь фиксированные внутренние отступы, чтобы текст не прилипал к краям.
Для такой формы можно задать такие стили:

input[type="text"] {
    width: 100%;
    padding: 0 10px;
}
Ширина 100% заставит поля быть такой же ширины, как родительский блок, а паддинг добавит отступы. Но, как вы уже догадались,
за счет отступов поле станет шире своего контейнера. Попрактикуемся.
Ширина полей ввода определяется значением атрибута size. Ширина width: auto для полей ввода рассчитывается из значения size по
умолчанию и не растягивает поля на всю ширину контейнера.

blockmodelproblem
-------------------------------------------
Изменяем блочную модель, свойство box-sizing

Проблему с шириной тянущихся полей решить сложно. Идеальным вариантом было бы изменение алгоритма расчета ширины элемента,
чтобы свойство width задавало не ширину содержания, а общую ширину.
К счастью, такая возможность была добавлена в CSS3 с помощью свойства box-sizing, которое уже поддерживается большинством
 современных браузеров.
Это свойство имеет два значения:

content-box — значение по умолчанию, соответствует стандартной блочной модели.
border-box — изменяет режим расчета ширины элемента на описанный выше.

boxsizing
--------------------------------------------
Второе испытание

Используйте полученные знания о тонкостях блочной модели, чтобы пройти это испытание.

Обратите внимание, что HTML-код заблокирован, а в нём некоторые CSS-свойства заданы в атрибуте style.
Это обозначает, что вы не можете их переопределить и придется выкручиваться по-другому

secondchallange
--------------------------------------------
Управление типом элемента, свойство display

Тип элемента не является чем-то вечным и неизменным, его можно изменять с помощью CSS. За это отвечает свойство display.
С его помощью, например, можно сделать абзацы и заголовки строчными, а спаны и стронги блочными элементами.
У свойства display много значений. С двумя из них вы уже заочно познакомились. Свойство display:block обозначает
блочный элемент, а display:inline — строчный.
В третьей части курса мы познакомимся с некоторыми более продвинутыми значениями свойства display.

display
---------------------------------------------
display: inline-block [18/23]

Иногда возникает необходимость расположить в ряд несколько элементов с заданными размерами. Строчные элементы для этого не подходят,
 т.к. не воспринимают размеры. Блочные элементы тоже не подходят, т.к. до и после них существует перенос строки. Конечно, блочные
 элементы можно приспособить для такой задачи, используя дополнительные свойства (которые будут разбираться в курсе про сетки).
Но более простой способ — использовать блочно-строчные элементы. В HTML нет тегов, которые по умолчанию вели бы себя как блочно-строчные,
но любой элемент можно переключить в данный режим, задав ему свойство display со значением inline-block.

Особенности блочно-строчных элементов:
им можно задавать размеры, рамки и отступы, как и блочным элементам;
их ширина по умолчанию зависит от содержания, а не растягивается на всю ширину контейнера;
они не порождают принудительных переносов строк, поэтому могут располагаться на одной строке, пока помещаются в родительский контейнер;
элементы в одной строке выравниваются вертикально подобно строчным элементам.

inlineblock
----------------------------------------------
display: table

Дальнейшие несколько заданий будут посвящены табличным типам элементов.

Табличные сетки были очень популярны на заре веба. Действительно, у табличных сеток есть преимущества, которые очень сложно получить
с помощью блоков. Например, столбцы одинаковой высоты.

Однако, семантически таблицы не предназначены для разметки сеток и постепенно от них отказались. Но память об их удобстве жила.

Позднее было разработано семейство значений свойства display, которое позволяет задать табличное поведение любым элементам.

Первое значение — display:table задает элементу тип таблица. Особенности табличных элементов:

можно задавать ширину, высоту, рамки, отступы;
по умолчанию ширина зависит от содержания;
переносы строки до и после элемента.
Табличные элементы похожи на блочные за исключением ширины по умолчанию.


displaytable
----------------------------------------------
display: table-row

Как вы догадались, мы строим таблицу на дивах с помощью новых значений свойства display.
Знания про таблицы вы можете освежить в курсе Знакомство с таблицами.

Любая таблица содержит элементы строка таблицы, внутри которых должны содержаться элементы ячейка таблицы.
Соответствие тегов таблицы значениям display:

<table> — display:table;

<tr> — display:table-row;

<td> — display:table-cell;

В этом задании вы создадите строки таблицы с помощью display:table-row;. Строка — необычный элемент.
 Она является контейнером для ячеек и практически не имеет собственного отображения. Для нее можно только задавать цвет фона.


tablerow
-----------------------------------------------
display: table-cell

С помощью значения table-cell свойства display можно задать элементу тип ячейка таблицы. Конечно,
лучше чтобы элементы-ячейки находились внутри элементов-строк, которые находятся внутри элементов-таблиц.

Вы можете просто задать элементу тип ячейка таблицы, не добавляя вокруг него дополнительных элементов-строк и таблиц.
 В этом случае браузер создаст дополнительные анонимные элементы строки и таблицы. Неудобство заключается в том, что вы
  не сможете ими управлять.
К таблицам, созданным с помощью CSS, можно применять те же свойства, что и к обычным таблицам. Например, задавать отступы
 между ячейками или режим схлопывания границ.

tablerow
---------------------------------------
display: none

Значение none свойства display используется очень часто. С его помощью можно скрыть элемент, как будто его и не было.
Скрытый элемент не отображается и не занимает места на странице.

Данное свойство применяется при создании выпадающих меню, динамических галерей, переключающихся вкладок и много где еще.

Есть еще одно CSS-свойство, которое используется для сокрытия элементов. Это свойство visibility со значением hidden. Оно
«прячет» элемент — он становится невидимым, но занимает место на странице.

displaynone
---------------------------------------
