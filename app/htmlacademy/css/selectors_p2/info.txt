Селекторы, часть 2
Рассмотрим продвинутые селекторы, такие как :nth-last-of-type
 или :only-child. Также научимся использовать псевдоэлементы, такие как ::before и ::after
----------------------------------
Объединение селекторов

Иногда может потребоваться выбрать элементы, которые одновременно удовлетворяют сразу нескольким условиям.

В CSS есть запись, которая фактически выполняет операцию логического умножения, «И». Селекторы, применяемые к одному элементу,
 в этом случае пишутся без пробелов:

.class1.class2 { }
Стили будут применяться ко всем элементам, которые одновременно имеют класс class1 и class2. Ведь это же не новость для вас,
что HTML-элементы могут одновременно иметь несколько классов. Например:
<div class="class1 class2">Блок с двумя классами</div>
По такому же принципу можно объединять любое количество абсолютно разных селекторов. И чем больше селекторов вы объединяете,
тем больше условий должно совпасть для применения стилей.

В программировании похожую операцию часто обозначают как &&. Например:

if (firstSelector && secondSelector) { ... }

mergeselector
-------------------------------------
Псевдокласс :not

Псевдокласс :not(селектор) является отрицающим селектором. С его помощью можно выбрать элементы, которые НЕ содержат указанный селектор:

li:not(:last-child) { }
Этот селектор выберет все теги <li>, НЕ являющиеся последними в их родителе.

Псевдокласс :not похож на оператор ! в программировании:

if (!selector) { ... }
В качестве селектора могут указываться псевдоклассы, теги, идентификаторы, классы и селекторы атрибутов.
Нельзя использовать двойной псевдокласс :not, то есть конструкция :not(:not(...)) не сработает.

Также в комбинации с :not не применяются:

объединение селекторов: например, li:not(.heart.jack) – некорректный селектор;
псевдоэлементы: li:not(::after) – неправильная запись (подробнее о псевдоэлементах рассказано далее в курсе);
селекторы-потомки, групповые селекторы или комбинации: например, нельзя писать li:not(a span) или li:not(a + span).

notpsevdo
----------------------------
Комбинируем :not

Отрицающий селектор :not, как и любые другие селекторы, можно комбинировать с другими. Например:

li:not(:first-child):not(:last-child) { }
Выберет все теги <li>, которые НЕ являются первыми и последними в их родителе.

Объединять можно неограниченное количество селекторов.

combinenotpsevdo
------------------------------
Псевдокласс :nth-last-child

В первом курсе про селекторы мы уже рассматривали псевдокласс :nth-child, сейчас посмотрим на :nth-last-child.

Псевдокласс :nth-last-child используется для добавления стиля к элементам на основе нумерации в дереве элементов.
В отличие от псевдокласса :nth-child, отсчет ведется не от первого элемента, а от последнего. Вот и все различия.

Подробнее об :nth-child и синтаксисе выражений рассказано в пошаговой демонстрации Использование псевдокласса :nth-child

lastchildpsevdo
-----------------------------
Псевдокласс :first-of-type

Псевдокласс :first-of-typeочень похож на :first-child. Он выбирает первый дочерний элемент родителя, только с учетом типа элементов.

Например, в этом задании перед списками с картами есть блок с текстом. У списков и у блока с текстом общий родитель — body.

<body>
    <div class="paper"> … </div>
    <ul class="cards"> … </ul>
    <ul class="cards"> … </ul>
</body>
Сравним две записи:

ul:first-child {
   background: #ffffee;
}

ul:first-of-type {
   background: #ffffee;
}
Верхний селектор выбирает первый дочерний элемент в родителе, причем этот элемент должен быть ul.
 В нашем случае не выберется ничего, потому что первым дочерним элементом body является div.

Нижний селектор выбирает первый ul среди всех дочерних ul в своем родителе. В нашем случае будет выбран первая строка с картами.

firstoftype
-------------------------------
Псевдокласс :last-of-type

В предыдущем задании мы рассмотрели псевдокласс :first-of-type.
Псевдокласс :last-of-type работает аналогично, только выбирает последний дочерний элемент родителя с учетом типа.

Пример записи:

ul:last-of-type {
    ...
}

lastoftype
--------------------------------
Псевдокласс :nth-of-type [7/20]

Псевдокласс :nth-of-type работает почти так же, как и :nth-child. Разница заключается в том, что он учитывает тип элемента.

Вы можете обратиться к разбору примера в пятом задании, чтобы разобраться в отличиях этих селекторов.

Еще пример. Если в текущем задании мы используем такие селекторы:

ul:nth-child(2) { }
ul:nth-of-type(2) { }
То верхний cелектор выберет второй по счёту дочерний элемент и этот элемент должен быть ul. В нашем случае выберется первая строка карт.

А нижний селектор выберет второй по счету ul среди дочерних ul. В нашем случае выберется вторая строка карт.

Информация о синтаксисе :nth-child описана в задании Псевдокласс :nth-child курса «Селекторы, часть 1».
Вот неплохая дополнительная статья о различиях :nth-child и :nth-of-type и её перевод на Хабре.

ntnoftype
---------------------------------
Псевдокласс :nth-last-of-type

Наверняка, вы и сами уже прекрасно догадались, как будет работать :nth-last-of-type.
Элементы выбираются по их расположению, отсчет ведется от конца, учитывается тип элемента.
Пример записи:
ul:nth-last-of-type(2) { }
Когда набор элементов не очень большой, все эти псевдоклассы :nth-child, :nth-of-type,
:nth-last-child, :nth-last-of-type можно легко заменить один другим.

На более сложных структурах зачастую бывает удобнее использовать только определённые из них.
 Например, когда нужно выделять второй элемент с конца, но количество элементов в списке изменяется.

ntnlasttype
--------------------------------
Испытание: первая раскладка

Большая часть этого курса посвящена картам. Давайте разложим небольшой пасьянс

У вас уже было похожее испытание в предыдущем курсе про селекторы. Вам не надо менять HTML-код,
все CSS-правила уже содержат правильные стили.

Единственное, что от вас требуется — всего лишь подобрать нужные селекторы для каждого CSS-правила.

Пустые дивы в коде не надо никак оформлять.
 Они специально добавлены, чтобы доставить неудобства при использовании некоторых более простых селекторов.

В задании используются цвета:

#0099ff blue
#ff3300 red
#339933 green
Все селекторы, выделяющие карты, можно записать одним правилом.
Освежить в памяти знания по :nth-child можно в интерактивном туториале.

firstchallange
--------------------------------











