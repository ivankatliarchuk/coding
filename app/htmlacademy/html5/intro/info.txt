Хедер и футер. Теги header и footer

В этом вводном курсе мы познакомимся с новыми возможностями HTML5. Основной упор сделаем на новые теги, но коснёмся и других нововведений.

Мы будем пошагово собирать блог известного вам веб-разработчика, используя появившиеся в HTML5 теги и применяя другие новшества.
Но сначала несколько важных фактов об HTML5:

HTML5 обратно совместим с HTML4.
HTML5 не цельная спецификация, а набор модулей разной степени готовности.
Многие модули HTML5 имеют хорошую поддержку во всех текущих браузерах.
HTML5 с нами надолго.
Это означает, что HTML5 можно использовать уже сейчас. Для этого достаточно задать такой тип документа:

<!DOCTYPE html>
Что вы уже давным-давно делаете в наших курсах.

А теперь пара новых тегов:

<header> — хедер сайта или раздела;
<footer> — футер сайта или раздела.
Да-да, это те самые хедер и футер, которые обычно верстались дивами с классами header или footer. Они были настолько распространены,
что для них было решено создать собственные теги.

headerfooter
--------------------------------------
Основное содержание. Тег main

Обратите внимание, что мы задали классы для хедера и футера. Сделано это потому, что этих элементов на странице может быть несколько.
Хедер — это не только привычная шапка сайта с логотипом и меню, он может использоваться и как «шапка» какой-нибудь статьи или раздела сайта.
 Конечно, в случае со статьёй хедер называют не «шапкой», а вводной частью, в которой могут содержаться заголовки, оглавление и так далее.
С футером ситуация аналогичная. В привычном нам понимании это подвал сайта, с копирайтами, контактной информацией и так далее. Но футер
 может использоваться и в других разделах сайта. Например, в статье в футере можно разместить дополнительную информацию: данные об авторе,
 дополнительные ссылки и так далее.
А раз теги неуникальные, то и стилизовать их лучше с помощью классов, как мы и сделали.
Если вы не хотите использовать классы для шапки и подвала сайта, то можете использовать селекторы body > header и body > footer.
 Эти селекторы не повлияют на хедеры и футеры, вложенные более глубоко.
Другое дело новый тег <main>, который обозначает основное содержание сайта и по спецификации может использоваться на странице
только один раз. Для его стилизации никакие классы не нужны.
Кстати, загляните в CSS и посмотрите, как сделаны фоны для основных блоков. В хедере и футере мы использовали линейные градиенты,
 которые детально разберём в более позднем курсе. А фоновую картинку для основного содержания мы задали с помощью так называемого
 data:URI, закодировав изображение прямо в CSS-коде. Это одна из продвинутых техник оптимизации вёрстки.

maintag
--------------------------------------
Разделы страницы. Теги article и section


articlesection
---------------------------------------
Изображения в формате SVG

Мы разметили базовые разделы нашей страницы. Теперь поработаем над каждым из них и начнём с шапки сайта.
Давайте добавим нашему сайту логотип. Для этого добавим в хедер <div>, а внутри него разместим привычное изображение.
 Используем картинку в векторном формате SVG, который уже достаточно хорошо поддерживается браузерами. Векторные изображения
 можно уменьшать и увеличивать без потери качества, в этом вы убедитесь в задании.
Кстати, обратите внимание на полупрозрачный фон в блоке «Обо мне». Он сделан с помощью нового формата записи цветов в CSS — rgba.

svgformat
----------------------------------------
Навигация. Тег nav

Теперь давайте добавим в шапку главное меню.
В HTML5 добавили специальный элемент для навигационных блоков — тег <nav>.
Так что теперь меню и блоки ссылок лучше оборачивать не в дивы, а в навы.
В остальном же для меню ничего не изменилось. Это был список ссылок внутри дива, а стал список ссылок внутри нава.

navtag
----------------------------------------
Завершаем футер

Теперь перейдем к доработке подвала сайта. Там нет ничего сложного. Просто нужно добавить пару смысловых разделов.
Обратите внимание на то, как повернётся изображение автора блога.
 Это сделано с помощью CSS-трансформаций, которые мы детально разберём в одном из последующих курсов.

footerdone
----------------------------------------
Использование нестандартных шрифтов

Перед тем как продолжить работу над сайтом, давайте разберёмся со шрифтами.

В HTML5 появилась возможность подключать и использовать на странице любые нестандартные шрифты.
Веб-шрифты поддерживаются большинством современных браузеров.
Простейший способ использовать такой шрифт — найти его в специальном сервисе по названию, получить там код
подключения шрифта, вставить этот код в свою вёрстку и использовать шрифт, как обычно, с помощью свойства font-family.
Подобных сервисов с бесплатными шрифтами достаточно много. Один из самых известных — это Google Fonts.
А вот похожий русскоязычный сервис: webfont.ru.
При использовании веб-шрифтов не забывайте указывать так называемые «фоллбэчные» шрифты — стандартные шрифты,
 которые будут отображаться, если веб-шрифт либо недоступен, либо не поддерживается старым браузером пользователя.
  Для этого нужно всего лишь перечислить их через запятую после нестандартного шрифта:

font-family: "PT Sans", "Arial", sans-serif;
Потренируемся подключать и использовать веб-шрифты.

nonstandardfont
-----------------------------------------












